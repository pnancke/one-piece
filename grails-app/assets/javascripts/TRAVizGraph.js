/*

Copyright (C) 2014, Stefan Jänicke.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

1. The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

2. It is prohibited to remove, hide or modify any visual copyright notice
generated by this Software.

3. When using screenshots of any part of the visual output generated by
this Software for presentations or on websites the following link MUST
be clearly visible for the beholder: http://traviz.vizcovery.org

4. When using screenshots of any part of the visual output generated by
this Software in publications, the following reference MUST be inserted: 

S. Jänicke, A. Geßner, M. Büchler and G. Scheuermann (2014). Visualizations
for Text Re-use. In Proceedings of the 5th International Conference on
Information Visualization Theory and Applications, IVAPP 2014, pages 59–70.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(Fair Academic License (FAL), http://vizcovery.org/fal.html)

*/

/**
 * -------------------------------------------------------
 * CLASS TRAVizGraph
 * -------------------------------------------------------
 * graph structure implementation
 * requires the <config>uration object to retrieve unique vertex indices
 */
function TRAVizGraph(config){
	this.config = config;
	this.vertices = [];
	this.vertexMap = [];
}

/**
 * Getter for vertex with the given <index>
 */
TRAVizGraph.prototype.getVertex = function(index){
	return this.vertexMap[index];
}

/**
 * Removes the vertex with the given <index> from the graph
 */
TRAVizGraph.prototype.removeVertex = function(index){
	var v = this.vertexMap[index];
	for( var i=0; i<v.successors.length; i++ ){
		this.vertexMap[v.successors[i]].removePredecessor(index);
	}
	for( var i=0; i<v.predecessors.length; i++ ){
		this.vertexMap[v.predecessors[i]].removeSuccessor(index);
	}
	for( var i=0; i<this.vertices.length; i++ ){
		if( this.vertices[i] == v ){
			this.vertices.splice(i,1);
			break;
		}
	}
	delete this.vertexMap[index];
}

/**
 * Adds a vertex <v> to the graph
 */
TRAVizGraph.prototype.addVertex = function(v){
	this.vertices.push(v);
	this.vertexMap[v.index] = v;
}

/**
 * Clones the graph structure
 */
TRAVizGraph.prototype.clone = function(){
	var cg = new TRAVizGraph();
	cg.config = this.config;
	for( var i=0; i<this.vertices.length; i++ ){
		cg.addVertex(new TRAVizVertex(cg,this.vertices[i].index,this.vertices[i].token));
	}
	for( var i=0; i<this.vertices.length; i++ ){
		var v = this.vertices[i];
		var vc = cg.vertices[i];
		vc.count = v.count;
		for( var j=0; j<v.sources.length; j++ ){
			vc.sources.push(v.sources[j]);
		}
		for( var j=0; j<v.successors.length; j++ ){
			vc.addSuccessor(v.successors[j]);
			cg.vertexMap[v.successors[j]].addPredecessor(vc.index);
		}
		for( var j=0; j<v.predecessors.length; j++ ){
			vc.addPredecessor(v.predecessors[j]);
			cg.vertexMap[v.predecessors[j]].addSuccessor(vc.index);
		}
	}
	return cg;
}

/**
 * Merges the two vertices <v1> and <v2> of the graph to v12 and
 * tests, if the graph is acyclic starting from v12
 */
TRAVizGraph.prototype.isAcyclicFromVertex = function(v1,v2){
	var v = new TRAVizVertex(this,this.config.getVertexIndex(),v1.token);
	this.addVertex(v);
	v.count = v1.count + v2.count;
	for( var i=0; i<v1.sources.length; i++ ){
		v.sources.push(v1.sources[i]);
	}
	for( var i=0; i<v2.sources.length; i++ ){
		v.sources.push(v2.sources[i]);
	}
	for( var i=0; i<v1.predecessors.length; i++ ){
		var id = v1.predecessors[i];
		if( id == v1.index || id == v2.index ){
			id = v.index;
		}
		v.addPredecessor(id);
		this.vertexMap[id].addSuccessor(v.index);
	}
	for( var i=0; i<v2.successors.length; i++ ){
		var id = v2.successors[i];
		if( id == v1.index || id == v2.index ){
			id = v.index;
		}
		v.addSuccessor(id);
		this.vertexMap[id].addPredecessor(v.index);
	}
	for( var i=0; i<v1.successors.length; i++ ){
		var id = v1.successors[i];
		if( id == v1.index || id == v2.index ){
			id = v.index;
		}			
		v.addSuccessor(id);
		this.vertexMap[id].addPredecessor(v.index);
	}
	for( var i=0; i<v2.predecessors.length; i++ ){
		var id = v2.predecessors[i];
		if( id == v1.index || id == v2.index ){
			id = v.index;
		}
		v.addPredecessor(id);
		this.vertexMap[id].addSuccessor(v.index);
	}
	for( var i=0; i<this.vertices.length; i++ ){
		this.vertices[i].visited = 0;
		this.vertices[i].limit = this.vertices[i].predecessors.length;
		for( var j=0; j<this.vertices[i].predecessors.length; j++ ){
			if( this.vertices[i].predecessors[j] == v1.index ){
				this.vertices[i].limit--;
			}
			if( this.vertices[i].predecessors[j] == v2.index ){
				this.vertices[i].limit--;
			}
		}
	}
	v.visited = v.limit;
	var edges = [];
	for( var i=0; i<v.successors.length; i++ ){
		if( v.successors[i] != v1.index && v.successors[i] != v2.index ){
			edges.push({
				head: v,
				tail: this.getVertex(v.successors[i])
			});
		}
	}
	while( edges.length > 0 ){
		var new_edges = [];
		for( var i=0; i<edges.length; i++ ){
			var e = edges[i];
			e.tail.visited++;
			if( e.tail.visited > e.tail.limit ){
				this.removeVertex(v.index);
				return false;
			}
			for( var j=0; j<e.tail.successors.length; j++ ){
				if( v.successors[i] != v1.index && v.successors[i] != v2.index && e.tail.visited == 1 ){
					new_edges.push({
						head: e.tail,
						tail: this.getVertex(e.tail.successors[j])
					});
				}
			}
		}
		edges = new_edges;
	}
	this.removeVertex(v1.index);
	this.removeVertex(v2.index);
	return v;
}

/**
 * Tests, if the graph is acyclic
 */
TRAVizGraph.prototype.isAcyclic = function(){
	do {
		var n = this.vertices.length;
		for( var i=0; i<this.vertices.length; i++ ){
			var vi = this.vertices[i];
			var suc = vi.successors, pred = vi.predecessors;
			if( suc.length == 0 ){
				for( var j=0; j<pred.length; j++ ){
					this.vertexMap[pred[j]].removeSuccessor(vi.index);
				}
				vi.predecessors = [];
			}
		}
		for( var i=this.vertices.length; i>0; i-- ){
			var vi = this.vertices[i-1];
			if( vi.successors.length == 0 && vi.predecessors.length == 0 ){
				this.removeVertex(vi.index);
			}
		}
	}
	while( n > this.vertices.length );
	if( this.vertices.length > 0 ){
		return false;
	}
	return true;
}

/**
 * Prints all edges of the graph to the console
 */
TRAVizGraph.prototype.printVertices = function(){
	for( var i=0; i<this.vertices.length; i++ ){
		var v = this.vertices[i];
		for( var j=0; j<v.successors.length; j++ ){
			var v2 = this.getVertex(v.successors[j]);
			console.info(v.id+" ---> "+v2.id,v.token+" ---> "+v2.token);
		}
	}
}


/**
 * -------------------------------------------------------
 * CLASS Vertex
 * -------------------------------------------------------
 * Vertex object of the <graph> with a given <index> representing the <token>
 */
function TRAVizVertex(graph,index,token) {
	this.graph = graph;
	this.token = token;
	this.successors = [];
	this.predecessors = [];
	this.count = 1;
	this.traced = false;
	this.linked = true;
	this.sources = [];
	this.index = index;
}

/**
 * removes the vertex successor <suc>
 */
TRAVizVertex.prototype.removeSuccessor = function(suc){
	for( var i=0; i<this.successors.length; i++ ){
		if( this.successors[i] == suc ){
			this.successors.splice(i,1);
			return;
		}
	}		
}

/**
 * removes the vertex predecessor <pred>
 */
TRAVizVertex.prototype.removePredecessor = function(pred){
	for( var i=0; i<this.predecessors.length; i++ ){
		if( this.predecessors[i] == pred ){
			this.predecessors.splice(i,1);
			return;
		}
	}		
}

/**
 * adds the vertex successor <suc>
 */
TRAVizVertex.prototype.addSuccessor = function(suc){
	var found = false;
	for( var i=0; i<this.successors.length; i++ ){
		if( suc == this.successors[i] ){
			found = true;
			break;
		}
	}
	if( !found ){
		this.successors.push(suc);
	}
}

/**
 * adds the vertex predecessor <pred>
 */
TRAVizVertex.prototype.addPredecessor = function(pred){
	var found = false;
	for( var i=0; i<this.predecessors.length; i++ ){
		if( pred == this.predecessors[i] ){
			found = true;
			break;
		}
	}
	if( !found ){
		this.predecessors.push(pred);
	}
}

TRAVizVertex.prototype.cloudify = function(){
	this.token = "CLOUD";
	//this.index = "CLOUD";
	//testen obs klappt wenn ich manuell alles aus den predessessors lösche
	//umbenennen von 1-3 in 1-2 usw wird wohl auch nötig sein, änderungen in der wordlist
	console.log("Cloudify of " + this.index + " word " + this.token);
	//console.log(this.token);
	console.log(this.successors);
}

TRAVizVertex.prototype.skipNext = function(){
	this.successors[0]++;
}

TRAVizVertex.prototype.skipPrevious = function(){
	this.predecessors[0]--;
}