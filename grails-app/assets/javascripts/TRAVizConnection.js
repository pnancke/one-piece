/*

Copyright (C) 2014, Stefan Jänicke.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

1. The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

2. It is prohibited to remove, hide or modify any visual copyright notice
generated by this Software.

3. When using screenshots of any part of the visual output generated by
this Software for presentations or on websites the following link MUST
be clearly visible for the beholder: http://traviz.vizcovery.org

4. When using screenshots of any part of the visual output generated by
this Software in publications, the following reference MUST be inserted: 

S. Jänicke, A. Geßner, M. Büchler and G. Scheuermann (2014). Visualizations
for Text Re-use. In Proceedings of the 5th International Conference on
Information Visualization Theory and Applications, IVAPP 2014, pages 59–70.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(Fair Academic License (FAL), http://vizcovery.org/fal.html)

*/

/**
 * -------------------------------------------------------
 * CLASS TRAVizConnection 
 * -------------------------------------------------------
 * represents the visual connection between 2 words
 * consists of vertical and horizontal connections (links)
 */
function TRAVizConnection(v1,v2,type){
	this.v1 = v1;
	this.v2 = v2;
	this.type = type;
	this.links = [];
}

/**
 * adds a link (vertical or horizontal) to the connection
 */
TRAVizConnection.prototype.addLink = function(link){
	this.links.push(link);
}


/**
 * -------------------------------------------------------
 * CLASS TRAVizVerticalConnection 
 * -------------------------------------------------------
 * represents a vertical connection
 * following a path, y1 is closer to the source vertex and y2 is closer to the sink vertex
 */
function TRAVizVerticalConnection(v1,v2,type){
	this.v1 = v1;
	this.v2 = v2;
	this.type = type;
}

/**
 * positions the vertical connection
 */
TRAVizVerticalConnection.prototype.position = function(x,y1,y2){
	this.x1 = x;
	this.x2 = x;
	this.y1 = y1;
	this.y2 = y2;
}

/**
 * returns the minimum y value
 */
TRAVizVerticalConnection.prototype.yMin = function(){
	return Math.min(this.y1,this.y2);
}

/**
 * returns the mamimum y value
 */
TRAVizVerticalConnection.prototype.yMax = function(){
	return Math.max(this.y1,this.y2);
}


/**
 * -------------------------------------------------------
 * CLASS TRAVizHorizontalConnection
 * -------------------------------------------------------
 * represents a horizontal connection
 * following a path, x1 is closer to the source vertex and x2 is closer to the sink vertex
 */
function TRAVizHorizontalConnection(v1,v2,type){
	this.v1 = v1;
	this.v2 = v2;
	this.type = type;
}

/**
 * positions the horizotal connection
 */
TRAVizHorizontalConnection.prototype.position = function(x1,x2,y){
	this.x1 = x1;
	this.x2 = x2;
	this.y1 = y;
	this.y2 = y;
}
